"""empty message

Revision ID: 28ea5a88b837
Revises: 
Create Date: 2020-11-02 12:59:57.300638

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '28ea5a88b837'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('game',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('current_period', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('demand_scenario_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scenario_per_period',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('demand_scenario_id', sa.Integer(), nullable=True),
    sa.Column('period', sa.Integer(), nullable=True),
    sa.Column('cost_fixed_administrative', sa.Integer(), nullable=True),
    sa.Column('interest_credit', sa.Float(), nullable=True),
    sa.Column('interest_overdraft', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scenario_per_product',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('demand_scenario_id', sa.Integer(), nullable=True),
    sa.Column('period', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('demand_quantity', sa.Integer(), nullable=True),
    sa.Column('sensitivity_price', sa.Float(), nullable=True),
    sa.Column('sensitivity_quality', sa.Float(), nullable=True),
    sa.Column('sensitivity_marketing', sa.Float(), nullable=True),
    sa.Column('correction_cost_labor', sa.Float(), nullable=True),
    sa.Column('correction_cost_materials_for_one_product', sa.Float(), nullable=True),
    sa.Column('cost_unpredicted', sa.Integer(), nullable=True),
    sa.Column('cost_materials_for_one_product', sa.Float(), nullable=True),
    sa.Column('cost_labor', sa.Float(), nullable=True),
    sa.Column('investment_for_one_marketing', sa.Integer(), nullable=True),
    sa.Column('investment_for_one_quality', sa.Integer(), nullable=True),
    sa.Column('quality_index_min', sa.Float(), nullable=True),
    sa.Column('quality_index_max', sa.Float(), nullable=True),
    sa.Column('marketing_index_min', sa.Float(), nullable=True),
    sa.Column('marketing_index_max', sa.Float(), nullable=True),
    sa.Column('marketing_keep_effect', sa.Float(), nullable=True),
    sa.Column('base_value_rand_quality', sa.Float(), nullable=True),
    sa.Column('cost_transport', sa.Float(), nullable=True),
    sa.Column('cost_storage', sa.Float(), nullable=True),
    sa.Column('cost_product_manager', sa.Integer(), nullable=True),
    sa.Column('cost_new_product_manager', sa.Integer(), nullable=True),
    sa.Column('price_research', sa.Integer(), nullable=True),
    sa.Column('max_price', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('username', sa.String(length=64), nullable=True),
    sa.Column('display_name', sa.String(length=120), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('password_hash', sa.String(length=120), nullable=True),
    sa.Column('member1', sa.String(length=120), nullable=True),
    sa.Column('member2', sa.String(length=120), nullable=True),
    sa.Column('member3', sa.String(length=120), nullable=True),
    sa.Column('member4', sa.String(length=120), nullable=True),
    sa.Column('member5', sa.String(length=120), nullable=True),
    sa.Column('member6', sa.String(length=120), nullable=True),
    sa.Column('member7', sa.String(length=120), nullable=True),
    sa.Column('member8', sa.String(length=120), nullable=True),
    sa.Column('member9', sa.String(length=120), nullable=True),
    sa.Column('member10', sa.String(length=120), nullable=True),
    sa.Column('game_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('display_name')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('period_totals',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('period_number', sa.Integer(), nullable=True),
    sa.Column('money_total_begining_of_period', sa.Float(), nullable=True),
    sa.Column('money_total_end_of_period', sa.Float(), nullable=True),
    sa.Column('total_production_quantity', sa.Integer(), nullable=True),
    sa.Column('total_administrative_costs', sa.Float(), nullable=True),
    sa.Column('total_interest_costs', sa.Float(), nullable=True),
    sa.Column('money_total', sa.Float(), nullable=True),
    sa.Column('credit_total', sa.Float(), nullable=True),
    sa.Column('overdraft', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('post',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('body', sa.String(length=140), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_post_timestamp'), 'post', ['timestamp'], unique=False)
    op.create_table('userinput',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('period_number', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('produce_quantity', sa.Integer(), nullable=True),
    sa.Column('sell_price', sa.Integer(), nullable=True),
    sa.Column('marketing_costs', sa.Integer(), nullable=True),
    sa.Column('research_and_development_costs', sa.Integer(), nullable=True),
    sa.Column('marketing_research_price', sa.Boolean(), nullable=True),
    sa.Column('marketing_research_sales', sa.Boolean(), nullable=True),
    sa.Column('marketing_research_quality', sa.Boolean(), nullable=True),
    sa.Column('marketing_research_marketing_costs', sa.Boolean(), nullable=True),
    sa.Column('approved_by_admin', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('period',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('period_number', sa.Integer(), nullable=True),
    sa.Column('userinput_id', sa.String(length=64), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('sell_price', sa.Float(), nullable=True),
    sa.Column('income_from_sells', sa.Float(), nullable=True),
    sa.Column('gross_proffit', sa.Float(), nullable=True),
    sa.Column('net_proffit', sa.Float(), nullable=True),
    sa.Column('accumulated_proffit', sa.Float(), nullable=True),
    sa.Column('labor_costs', sa.Float(), nullable=True),
    sa.Column('material_costs', sa.Float(), nullable=True),
    sa.Column('total_production_cost', sa.Float(), nullable=True),
    sa.Column('marketing_costs', sa.Float(), nullable=True),
    sa.Column('research_and_development_costs', sa.Float(), nullable=True),
    sa.Column('transport_costs', sa.Float(), nullable=True),
    sa.Column('storage_costs', sa.Float(), nullable=True),
    sa.Column('administrative_costs', sa.Float(), nullable=True),
    sa.Column('marketing_research_costs', sa.Float(), nullable=True),
    sa.Column('interest_costs', sa.Float(), nullable=True),
    sa.Column('other_costs', sa.Float(), nullable=True),
    sa.Column('total_non_production_costs', sa.Float(), nullable=True),
    sa.Column('products_sold', sa.Integer(), nullable=True),
    sa.Column('products_in_stock_beginning_of_period', sa.Integer(), nullable=True),
    sa.Column('products_in_stock_end_of_period', sa.Integer(), nullable=True),
    sa.Column('research_price', sa.Integer(), nullable=True),
    sa.Column('research_marketing', sa.Integer(), nullable=True),
    sa.Column('research_quality', sa.Integer(), nullable=True),
    sa.Column('research_sales', sa.Integer(), nullable=True),
    sa.Column('index_marketing', sa.Float(), nullable=True),
    sa.Column('index_quality', sa.Float(), nullable=True),
    sa.Column('consolidated_rnd_budget', sa.Float(), nullable=True),
    sa.Column('consolidated_marketing_budget', sa.Float(), nullable=True),
    sa.Column('total_costs', sa.Float(), nullable=True),
    sa.Column('product_manager_costs', sa.Float(), nullable=True),
    sa.Column('is_producing', sa.Boolean(), nullable=True),
    sa.Column('recalc_quality', sa.Float(), nullable=True),
    sa.Column('recalc_marketing', sa.Float(), nullable=True),
    sa.Column('recalc_price', sa.Float(), nullable=True),
    sa.Column('combined_score', sa.Float(), nullable=True),
    sa.Column('market_share', sa.Float(), nullable=True),
    sa.Column('demand', sa.Integer(), nullable=True),
    sa.Column('direct_sells', sa.Integer(), nullable=True),
    sa.Column('unsatisfied_demand', sa.Integer(), nullable=True),
    sa.Column('secondary_sells', sa.Integer(), nullable=True),
    sa.Column('total_sells', sa.Integer(), nullable=True),
    sa.Column('random_value', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['userinput_id'], ['userinput.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    # custom commands
    # add default admin
    op.execute("INSERT INTO \"user\" (id, is_admin, username, display_name, email, password_hash) "
               "VALUES (default, TRUE, 'admin', 'баце Марчев', 'filipov.bogomil@gmal.com', "
               "'pbkdf2:sha256:150000$4cxvcwnI$dd8e2193d11aed58163e6e2fbe57283cf69cb3dd"
               "af24dec0b4ae8b579112bf29');")

    # populate products
    for product in [(1, 'Кисело мляко 1'), (2, 'Кисело мляко 2'), (3, 'Кисело мляко 3')]:
        op.execute(f"INSERT INTO \"product\" (id, name) VALUES ({product[0]}, '{product[1]}');")

    # populate scenario per product
    for product in [1, 2, 3]:
        cost_materials = product + 2

        for period in range(1, 21):
            cost_unpredicted = 0

            op.execute('INSERT INTO "scenario_per_product" (id, demand_scenario_id, period, product_id, '
                       'demand_quantity, sensitivity_price, sensitivity_quality, sensitivity_marketing, '
                       'correction_cost_labor, correction_cost_materials_for_one_product, '
                       'cost_unpredicted, cost_materials_for_one_product, cost_labor, investment_for_one_marketing, '
                       'investment_for_one_quality, quality_index_min, quality_index_max, marketing_index_min, '
                       'marketing_index_max, marketing_keep_effect, base_value_rand_quality, cost_transport, '
                       'cost_storage, cost_product_manager, cost_new_product_manager, price_research, max_price) '
                       f'VALUES (default, 1, {period}, {product}, 3850, 1, 1.05, 0.95, 1, 1, {cost_unpredicted}, '
                       f'{cost_materials}, 5, 200, 1000, 2, 5, 2, 5, 0.5, 0.7, 1.5, 0.5, 1000, 1500, 500, 50);')

    # populate scenario per period
    for period in range(1, 21):
        op.execute('INSERT INTO "scenario_per_period" (id, demand_scenario_id, period, cost_fixed_administrative, '
                   'interest_credit, interest_overdraft) '
                   f'VALUES (default, 1, {period}, 5000, 0.05, 0.1);')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('period')
    op.drop_table('userinput')
    op.drop_index(op.f('ix_post_timestamp'), table_name='post')
    op.drop_table('post')
    op.drop_table('period_totals')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_table('scenario_per_product')
    op.drop_table('scenario_per_period')
    op.drop_table('product')
    op.drop_table('game')
    # ### end Alembic commands ###
