"""empty message

Revision ID: b891570fbb0c
Revises: 
Create Date: 2020-10-25 13:45:10.636110

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = 'b891570fbb0c'
down_revision = None
branch_labels = None
depends_on = None


# populate demand scenario:
demands = {
    'scenario_1': {
        'scenario_id': 1,
        'periods': [
            {1: [200, 300, 400]},
            {2: [200, 300, 400]},
            {3: [200, 300, 400]},
            {4: [200, 300, 400]},
            {5: [200, 300, 400]},
            {6: [200, 300, 400]},
            {7: [200, 300, 400]},
            {8: [200, 300, 400]},
            {9: [200, 300, 400]},
            {10: [200, 300, 400]},
            {11: [200, 300, 400]},
            {12: [200, 300, 400]},
            {13: [200, 300, 400]},
            {14: [200, 300, 400]},
            {15: [200, 300, 400]},
            {16: [200, 300, 400]},
            {17: [200, 300, 400]},
            {18: [200, 300, 400]},
            {19: [200, 300, 400]},
            {20: [200, 300, 400]},
        ]
    }
}


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('demand',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('demand_scenario_id', sa.Integer(), nullable=True),
    sa.Column('period', sa.Integer(), nullable=True),
    sa.Column('demand_A', sa.Integer(), nullable=True),
    sa.Column('demand_B', sa.Integer(), nullable=True),
    sa.Column('demand_C', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # ### commands made by bogo ###
    for dk, dv in demands.items():
        for period in dv.get('periods'):
            op.execute('INSERT INTO "demand" (id, demand_scenario_id, period, "demand_A", "demand_B", "demand_C") '
                       'VALUES ({}, {}, {}, {}, {}, {});'
                       .format('default', dv.get("scenario_id"),
                               list(period.keys())[0], list(period.values())[0][0],
                               list(period.values())[0][1], list(period.values())[0][2]))

    op.create_table('game',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('current_period', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('demand_scenario_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('period',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('period_number', sa.Integer(), nullable=True),
    sa.Column('approved', sa.Boolean(), nullable=True),
    sa.Column('price_product_a', sa.Numeric(), nullable=True),
    sa.Column('price_product_b', sa.Numeric(), nullable=True),
    sa.Column('price_product_c', sa.Numeric(), nullable=True),
    sa.Column('in_stock_product_a', sa.Integer(), nullable=True),
    sa.Column('in_stock_product_b', sa.Integer(), nullable=True),
    sa.Column('in_stock_product_c', sa.Integer(), nullable=True),
    sa.Column('product_a_produced', sa.Integer(), nullable=True),
    sa.Column('product_b_produced', sa.Integer(), nullable=True),
    sa.Column('product_c_produced', sa.Integer(), nullable=True),
    sa.Column('product_a_sold', sa.Integer(), nullable=True),
    sa.Column('product_b_sold', sa.Integer(), nullable=True),
    sa.Column('product_c_sold', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('post',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('body', sa.String(length=140), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_post_timestamp'), 'post', ['timestamp'], unique=False)
    op.create_foreign_key(None, 'user', 'game', ['game_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user', type_='foreignkey')
    op.drop_index(op.f('ix_post_timestamp'), table_name='post')
    op.drop_table('post')
    op.drop_table('period')
    op.drop_table('game')
    op.drop_table('demand')
    # ### end Alembic commands ###
